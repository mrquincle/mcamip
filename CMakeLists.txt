##########################################################################################
#                                .__        
#    _____   ____ _____    _____ |__|_____  
#   /     \_/ ___\\__  \  /     \|  \____ \ 
#  |  Y Y  \  \___ / __ \|  Y Y  \  |  |_> >
#  |__|_|  /\___  >____  /__|_|  /__|   __/ 
#        \/     \/     \/      \/   |__|    
#
##########################################################################################
# With respect to his CMake build system
# Author:	 Anne C. van Rossum (Almende B.V.)
# Date: 	 Sep. 18, 2012
#
# URLs used to create this CMakeLists.txt file:
#   http://www.cmake.org/cmake/help/cmake_tutorial.html
#   http://brunoabinader.blogspot.com/2009/12/how-cmake-simplifies-build-process-part.html
#   http://rachid.koucha.free.fr/tech_corner/cmake_manual.html
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "graffiti".
#
# Copyright Â© 2012 Anne van Rossum <anne@almende.com>
##########################################################################################

# I am not sure what the proper version number should be
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# The project name (sets all _SOURCE_DIR)
PROJECT(mcamip)

# The directory with all the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

# The macro below forces the build directory to be different from source directory:
INCLUDE( MacroEnsureOutOfSourceBuild )
MACRO_ENSURE_OUT_OF_SOURCE_BUILD(
	"${PROJECT_NAME} requires an out of source build."
)

INCLUDE(UtilityMacros)

# Versioning
SET(MCAMIP_VERSION_MAJOR 0)
SET(MCAMIP_VERSION_MINOR 1)

# Policies
# Remove policy warning as indicated by: cmake --help-policy CMP0015
if(POLICY CMP0015)
	cmake_policy(SET CMP0015 OLD) 
endif()

##############################################################################
# Use the FindXXX utility classes

# JPEG library
FIND_PACKAGE(JPEG REQUIRED)
FIND_PACKAGE(X11 REQUIRED)
FIND_PACKAGE(GTK REQUIRED)

# The directories where includes (.h, .hpp, .so) files can be found
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/inc")

# A series of customizable options
#OPTION( BUILD_BLAH "Explanation to user" ON)

find_library(XAW_LIBRARY NAMES Xaw Xaw7 PATHS ${DEP_LIB_SEARCH_DIR} ${X11_LIB_SEARCH_PATH})
if (NOT XAW_LIBRARY OR NOT X11_Xt_FOUND)
	set(X11_FOUND FALSE)
endif ()

##############################################################################
# Use results from Find utilities

IF(NOT X11_Xt_FOUND)
	MESSAGE(FATAL_ERROR "XT for X11 not found, install libxt-dev")
ELSE(NOT X11_Xt_FOUND)
	MESSAGE("XT for X11 found")
ENDIF(NOT X11_Xt_FOUND)
	

# The header files of required libraries are located in
INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${X11_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${X11_Xt_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${GTK_INCLUDE_DIR})


# The libraries itself can be found as
# Be careful to include either LIBRARY or LIBRARIES, terminology depends per FindXXX file
SET(LIBS ${LIBS} ${JPEG_LIBRARY})
SET(LIBS ${LIBS} ${X11_LIBRARIES})
SET(LIBS ${LIBS} ${X11_Xt_LIB})
SET(LIBS ${LIBS} ${XAW_LIBRARY})
SET(LIBS ${LIBS} ${GTK_LIBRARY})

##############################################################################
# Set flags 
SET(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG "-Wl,-soname,")

##############################################################################
# Communicate settings to user

# Some debug information
MESSAGE("${PROJECT_NAME} is using CXX flags: ${CMAKE_CXX_FLAGS}")
MESSAGE ("Libraries included: ${LIBS}")
MESSAGE ("CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
get_property(INCLUDEDIRS DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
foreach(INCLUDEDIR ${INCLUDEDIRS})
  message(STATUS "include dir='${INCLUDEDIR}'")
endforeach()

# RPATH
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
ADD_TO_RPATH_IF_NOT_SYSTEM("${CMAKE_INSTALL_PREFIX}/lib")

# Search for source code.
FILE(GLOB GLOB_SOURCE src/*.cpp src/*.cc src/*.c)
FILE(GLOB GLOB_HEADERS inc/*.h inc/*.hpp)

# Linking the main
IF (GLOB_SOURCE)
	ADD_EXECUTABLE(${PROJECT_NAME} ${GLOB_SOURCE} ${GLOB_HEADERS} )
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBS})
	INSTALL(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
ELSE (GLOB_SOURCE)
	MESSAGE(FATAL_ERROR "No source code found")
ENDIF (GLOB_SOURCE)

